<?php

/**
 * @file
 * RestAuth authentication module.
 */

require_once 'RestAuth/restauth.php';
// Global variable so we only get the connection once.
$_restauth_connection;


/**
 * Singleton method for getting a RestAuth connection.
 */
function get_restauth_connection() {
  global $_restauth_connection;
  if (is_null($_restauth_connection)) {
    $_restauth_connection = new RestAuthConnection(
      variable_get('restauth_server'),
      variable_get('restauth_server_user'),
      variable_get('restauth_server_pass')
    );
  }
  return $_restauth_connection;
}
/**
 * Shortcut for getting a RestAuth user object.
 *
 * Note that this function in no way guarantees, that this user exists.
 */
function get_restauth_user($username) {
  $restauth_conn = get_restauth_connection();
  return new RestAuthUser($restauth_conn, $username);
}

/**
 * Get group names of a RestAuth user.
 */
function get_restauth_user_groups($user) {
  $groups = $user->getGroups();

  $group_names = array();
  // Get array of names for matching.
  foreach ($groups as $group) {
    $group_names[] = $group->name;
  }

  return $group_names;
}

/**
 * Returns the error string used when RestAuth authentication doesn't work.
 */
function general_exception_msg() {
  return t("An error occured at our authentication server. Please try again later.");
}

/**
 * Same as user_external_load() but matches case-insensitive.
 */
function user_external_load_nocase($authname) {
  $sql = "SELECT uid FROM {authmap} WHERE LOWER(authname) = LOWER(:authname)";
  $uid = db_query($sql, array(':authname' => $authname))->fetchField();

  if ($uid) {
    return user_load($uid);
  }
  else {
    return FALSE;
  }
}

/**
 * Load a user object from its username, but case insensitive.
 */
function user_load_by_name_nocase($name) {
  $sql = "SELECT * FROM {users} WHERE LOWER(name) = LOWER(:name) AND status = 1";
  return db_query($sql, array(':name' => $name))->fetchObject();
}

/**
 * Transform a array of group names into an array suitable for user_save().
 *
 * Note that group names that don't match any local role will be silently
 * discareded.
 */
function get_roles_from_groupnames($names) {
  $roles = user_roles(TRUE);
  return array_intersect($roles, $names);
}

/**
 * Add a user to the local "user" database table.
 *
 * @todo: Handle password.
 */
function restauth_add_local_user($name, $email) {
  $name = strtolower($name);

  $userinfo = array(
    'name' => $name,
    // @todo: check setting if we should hash password
    // 'pass' => user_password(),
    'mail' => $email,
    'init' => $name,
    'status' => 1,
    'access' => REQUEST_TIME,
  );

  $account = user_save(drupal_anonymous_user(), $userinfo);
  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    return FALSE;
  }
  user_set_authmaps($account, array("authname_restauth" => $name));
  return $account;
}

/**
 * Implements hook_help().
 *
 * Display a small help message if somebody clicks the "Help" link on the
 * modules list.
 */
function restauth_help($path, $arg) {
  switch ($path) {
    case 'admin/help#extauth':
      return '<p>' . t('RestAuth authentication.') . '</p>';
  }
}

/**
 * Implements hook_form_user_login_alter().
 *
 * Login validators are set in the user_login_default_validators() function in
 * user.module. They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with
 * 'extauth_login_validate'.
 */
function restauth_form_user_login_alter(&$form, $form_state) {
  if (variable_get('restauth_server')) {
    $form['#validate'] = array(
      'user_login_name_validate',
      'restauth_login_validate',
      'user_login_final_validate',
    );
  }
}
/**
 * Implements hook_form_form_user_login_block_alter().
 */
function restauth_form_user_login_block_alter(&$form, $form_state) {
  if (variable_get('restauth_server')) {
    $form['#validate'] = array(
      'user_login_name_validate',
      'restauth_login_validate',
      'user_login_final_validate',
    );
  }
}
/**
 * Implements hook_form_user_login_form_alter().
 *
 * This hook is suspected to be never called and just dies.
 */
function restauth_form_user_login_form_alter(&$form, $form_state) {
  $form['#validate'] = array(
    'user_login_name_validate',
    'restauth_login_validate',
    'user_login_final_validate',
  );
  die('Should never happen?');
}
/**
 * Actual function that does the RestAuth authentication call.
 *
 * @todo: We currently get two error messages when the user already exists on
 *        both sites.
 */
function restauth_login_validate($form, &$form_state) {
  global $user;
  $username = strtolower($form_state['values']['name']);
  $restauth_user = get_restauth_user($username);

  if ($restauth_user->verifyPassword($form_state['values']['pass'])) {
    // This is a correct login, fetch user from the database.

    // Fetch data so it can be saved to the database.
    try {
      $restauth_email = $restauth_user->getProperty('email');
    }
    catch (RestAuthResourceNotFound $e) {
      $restauth_email = NULL;
    }

    try {
      // Groups are handled in a try/catch block separate from email, because
      // the email is not an error and groups still have to be fetched.
      $restauth_groups = get_restauth_user_groups($restauth_user);
    }
    catch (RestAuthResourceNotFound $e) {
      $restauth_groups = array();
    }

    $user = user_external_load_nocase($username);
    if ($user === FALSE) {
      // User not in the authmap table, try getting it from the users table.
      $user = user_load_by_name_nocase($username);

      if ($user === FALSE) {
        // Not in the user table either, so never logged in here before.
        $user = restauth_add_local_user($username, $restauth_email);
      }
      else {
        // Just add an authmap table entry.
        user_set_authmaps($user, array("authname_restauth" => $username));
      }
    }

    // Save roles and email address.
    $user_edit = array(
      'roles' => get_roles_from_groupnames($restauth_groups),
      'mail' => $restauth_email,
    );
    if (variable_get('restauth_local_hash_storage')) {
      // save password hash if requested
      $user_edit['pass'] = $form_state['values']['pass'];
    }
    user_save($user, $user_edit);

    $form_state['uid'] = $user->uid;
  }
  else {
    form_set_error('pass', t('Wrong username or password.'));
  }
}

/**
 * Implements hook_form_user_register_form_alter().
 *
 * This hook alters the user registration form.
 */
function restauth_form_user_register_form_alter(&$form, $form_state) {
  if (variable_get('restauth_server')) {
    $form['#validate'][] = 'restauth_validate_new_user';
    $form['#submit'] = array('restauth_user_register_submit');
  }
}

/**
 * Additional validation for the registration form.
 */
function restauth_validate_new_user($form, &$form_state) {
  // @todo: if form already has errors, skip restauth calls?

  $restauth_conn = get_restauth_connection();
  $username = $form_state['values']['name'];
  $email = $form_state['values']['mail'];
  try {
    RestAuthUser::createTest(
      $restauth_conn, $username, NULL, array('email' => $email));
  }
  catch (RestAuthUserExists $e) {
    form_set_error('name', t("User already exists."));
  }
  catch (RestAuthException $e) {
    form_set_error('name', general_exception_msg());
  }
}
/**
 * Overrides user_register_submit().
 */
function restauth_user_register_submit($form, &$form_state) {
  $restauth_conn = get_restauth_connection();
  $username = $form_state['values']['name'];
  $email = $form_state['values']['mail'];

  // NOTE: Any exception is very unlikely, since we just tested everything with
  // restauth_validate_new_user.
  try {
    $restauth_user = RestAuthUser::create(
      $restauth_conn, $username, NULL, array('email' => $email));
    user_register_submit($form, $form_state);

    // Add user to the authmap table:
    user_set_authmaps($form_state['user'],
      array("authname_restauth" => strtolower($username)));
  }
  catch (RestAuthUserExists $e) {
    drupal_set_message(t("User already exists."), 'error');
  }
  catch (RestAuthException $e) {
    drupal_set_message(general_exception_msg(), 'error');
  }
}

/**
 * Alter the user profile form.
 *
 * This form is displayed if an admin "edits" a user or if the user edits its
 * own profile.
 */
function restauth_form_user_profile_form_alter(&$form, $form_state) {
  if (variable_get('restauth_server')) {
    // Get RestAuth data.
    $restauth_user = get_restauth_user($form['#user']->name);
    try {
      $restauth_props = $restauth_user->getProperties();
      $restauth_groups = get_restauth_user_groups($restauth_user);
    }
    catch (RestAuthResourceNotFound $e) {
      drupal_set_message(t("User not found in RestAuth."), 'error');
      $form['actions']['submit']['#disabled'] = TRUE;
      return;
    }
    catch (RestAuthException $e) {
      drupal_set_message(general_exception_msg(), 'error');
      return;
    }

    // Use our own form handlers.
    $form['#submit'] = array('restauth_user_profile_form_submit');

    // Update default data.
    $email = array_key_exists('email', $restauth_props) ? $restauth_props['email'] : '';
    $form['account']['mail']['#default_value'] = $email;
    $form['account']['name']['#description'] = '';
    // Disable renaming of account.
    $form['account']['name']['#disabled'] = 1;
    $form['account']['roles']['#default_value'] = array(DRUPAL_AUTHENTICATED_RID);

    // Update groups.
    foreach ($form['account']['roles']['#options'] as $key => $role) {
      if (in_array($role, $restauth_groups)) {
        $form['account']['roles']['#default_value'][] = $key;
      }
    }
  }
}

/**
 * Handle a a change in the user profile.
 *
 * This includes both changes by the user itself and by administrators.
 */
function restauth_user_profile_form_submit($form, &$form_state) {
  // @todo: Password is still saved locally.

  $username = $form_state['values']['name'];
  $password = $form_state['values']['pass'];
  $email = $form_state['values']['mail'];

  $restauth_user = get_restauth_user($username);

  // Set email if it was changed.
  if ($email !== $form['account']['mail']['#default_value']) {
    // #default_value set by form_alter hook to what is currently in RestAuth.
    $restauth_user->setProperty('email', $email);
  }

  // Set password if it was set.
  if (!empty($password)) {
    $restauth_user->setPassword($password);
  }

  // Calculate added and removed groups.
  $del_groups = array();
  $add_groups = array();
  $submitted = $form['account']['roles']['#value'];
  $original = $form['account']['roles']['#default_value'];
  foreach ($form['account']['roles']['#options'] as $key => $role) {
    if (array_key_exists($key, $submitted) && !in_array($key, $original)) {
      $add_groups[] = $role;
    }
    elseif (!array_key_exists($key, $submitted) && in_array($key, $original)) {
      $del_groups[] = $role;
    }
  }

  // Actually add/remove groups.
  foreach ($add_groups as $group) {
    try {
      $restauth_user->addGroup($group);
    }
    catch (RestAuthResourceNotFound $e) {
      // Create group if it doesn't exist.
      $restauth_group = RestAuthGroup::create(get_restauth_connection(), $group);
      $restauth_group->addUser($username);
    }
    catch (RestAuthException $e) {
      drupal_set_message(general_exception_msg(), 'error');
    }
  }
  foreach ($del_groups as $group) {
    try {
      $restauth_user->removeGroup($group);
    }
    catch (RestAuthResourceNotFound $e) {
      // Create group if it doesn't exist.
      $restauth_group = RestAuthGroup::create(get_restauth_connection(), $group);
    }
    catch (RestAuthException $e) {
      drupal_set_message(general_exception_msg(), 'error');
    }
  }

  // Remove password from form if we should not store hashes.
  if (!variable_get('restauth_local_hash_storage')) {
    $form_state['values']['pass'] = '';
  }

  // Save data in local database.
  user_profile_form_submit($form, $form_state);

  if (!variable_get('restauth_local_hash_storage')) {
    $record = array(
      'uid' => $form['#user']->uid,
      'pass' => '',
    );
    $success = drupal_write_record('users', $record, 'uid');
  }
}

/**
 * Implements hook_form_user_pass_alter().
 */
function restauth_form_user_pass_alter(&$form, $form_state) {
  if (variable_get('restauth_server')) {
    $form['name']['#description']
      = t('<strong>Note:</strong> e-mail only works if you have logged in through this site before.');
    $form['#validate'][] = 'restauth_user_pass_validate';
  }
}

/**
 * Validate the password reset request form.
 *
 * This function first tries to find a local user via username or email and
 * only if that doesn't work, queries RestAuth for the username.
 *
 * Note that if RestAuth is queried, the user has to have an e-mail address
 * defined. If that is not the case, Drupal will act as if the user were
 * unknown.
 */
function restauth_user_pass_validate(&$form, $form_state) {
  $name = trim($form_state['values']['name']);

  // First, we try to load by email, if that works, we don't need a
  // RestAuth request.
  $account = user_load_by_mail($name);

  // Could not find user by email-address
  // Try to load by username.
  if (!$account) {
    $account = user_load_by_name($name);

    // Check if the user has an email-address defined. If not, we need to fetch
    // it from RestAuth. It's an error if no email-address exists, because we
    // cannot send a reset email.
    if ($account && !$account->mail) {
      $restauth_user = get_restauth_user($name);
      try {
        $restauth_email = $restauth_user->getProperty('email');
        // Save the email in the database...
        $account = user_save($account, array('mail' => $restauth_email));
      }
      catch (RestAuthResourceNotFound $e) {
        form_set_error('name', t('Sorry, %name exists but has no e-mail address defined.',
          array('%name' => $name)));
        return;
      }
      catch (RestAuthException $e) {
        form_set_error('name', general_exception_msg());
        return;
      }
    }

    // User is not at all known in the local database, so we try to query
    // RestAuth for a user and email address.
    if (!$account) {
      try {
        $restauth_user = RestAuthUser::get(get_restauth_connection(), $name);
        $restauth_email = $restauth_user->getProperty('email');

        // Load (or add) user to local database.
        // @todo: not yet case insensitive.
        $account = user_external_load($name);
        if (!$account) {
          $user = restauth_add_local_user($name, $restauth_email);
        }
      }
      catch (RestAuthResourceNotFound $e) {
        form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.',
                       array('%name' => $name)));
      }
      catch (RestAuthException $e) {
        form_set_error('name', general_exception_msg());
      }
    }
  }
}

/**
 * Implements hook_menu().
 *
 * This hook adds the configuration form defined in restauth_form().
 */
function restauth_menu() {
  $items = array();
  $items['admin/config/system/restauth'] = array(
    'title' => 'RestAuth',
    'description' => 'Configuration for RestAuth authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restauth_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Define the configuration form for this plugin.
 */
function restauth_form($form, &$form_state) {
  $form['restauth_server'] = array(
    '#type' => 'textfield',
    '#title' => t('RestAuth server'),
    '#default_value' => variable_get('restauth_server'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('URL of RestAuth server, e.g. <em>https://auth.example.com</em>.'),
    '#required' => TRUE,
  );
  $form['restauth_server_user'] = array(
    '#type' => 'textfield',
    '#title' => t('RestAuth server user'),
    '#default_value' => variable_get('restauth_server_user'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('User used for authenticating with the RestAuth server.'),
    '#required' => TRUE,
  );
  $form['restauth_server_pass'] = array(
    '#type' => 'password',
    '#title' => t('RestAuth server password'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('Password used for authenticating with the RestAuth server.'),
    '#attributes' => array('value' => variable_get('restauth_server_pass')),
    '#required' => TRUE,
  );
  $form['restauth_local_hash_storage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Store password hashes.'),
    '#default_value' => variable_get('restauth_local_hash_storage'),
    '#description' => t('If checked, Drupal will be able to authenticate users if the RestAuth server is unavailable or you disable this plugin.'),
  );
  return system_settings_form($form);
}

// vim: set filetype=php expandtab tabstop=2 shiftwidth=2 autoindent smartindent:
